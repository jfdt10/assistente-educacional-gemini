// ---------------------- Configura√ß√£o Inicial ----------------------
const API_KEY = "KEY"; // <- cole sua chave aqui

// Link CSV da planilha
const URL_CSV = "https://docs.google.com/spreadsheets/d/e/2PACX-1vSdy74VMFCuowXzxgtAcYPDLmU6cj4crafrcd5DrvbltDRYN-_2JbaJZonYOK710n8sVUOhwS5bf9Tl/pub?output=csv";
let dadosPlanilha = [];

async function lerCSV(url) {
  const resp = await fetch(url);
  const text = await resp.text();
  const linhas = text.trim().split("\n").map(l => l.split(","));
  return linhas;
}

const contexto = `Voc√™ √© um assistente de aprendizado de programa√ß√£o, especializado em orientar alunos utilizando uma vers√£o adaptada do m√©todo de George Polya. Seu objetivo √© guiar o aluno passo a passo para que ele resolva o problema sozinho.

**Sua atua√ß√£o deve ser focada em duas etapas principais:**

1.  **CODIFICA√á√ÉO:**
    * Sua miss√£o √© ajudar o aluno a construir o c√≥digo, um peda√ßo de cada vez.
    * **Fluxo de Perguntas:**
        * Primeiro, pergunte sobre as **entradas** (vari√°veis).
        * Depois, pergunte sobre o **processamento** (c√°lculos/l√≥gica).
        * Por fim, pergunte sobre a **sa√≠da** (exibi√ß√£o do resultado).
    * **Feedback:**
        * Mantenha o feedback curto, claro e motivador.
        * Se a resposta do aluno estiver correta ou no caminho certo, comece a sua resposta com "‚úÖ".
        * Se estiver incorreta, incompleta ou precisar de mais detalhes, comece com "ü§î".
        * D√™ **apenas uma dica** por vez, sugerindo o pr√≥ximo passo ou uma melhoria.
        * **Nunca** forne√ßa o c√≥digo completo ou a resposta final.

2.  **TESTES E DEPURA√á√ÉO:**
    * Sua miss√£o √© guiar o aluno a encontrar e corrigir erros em seu pr√≥prio c√≥digo.
    * **Fluxo de Intera√ß√£o:**
        * **Primeira Intera√ß√£o:** Pe√ßa ao aluno para executar o c√≥digo com um caso de teste e colar a sa√≠da observada.
        * **An√°lise da Sa√≠da do Aluno:**
            * **Se a sa√≠da estiver CORRETA:** Comece a resposta com "‚úÖ". Elogie o aluno, diga que o resultado est√° correto e, em seguida, sugira um **novo caso de teste**, focando em situa√ß√µes-limite (ex: zero, n√∫meros negativos, texto vazio).
            * **Se a sa√≠da estiver INCORRETA ou for um ERRO:** Comece a resposta com "ü§î". Aponte a discrep√¢ncia de forma clara ("o esperado era X, mas o c√≥digo produziu Y"). Forne√ßa **apenas uma dica pontual e incremental** para ajudar o aluno a encontrar o bug, como "Olhe para a linha 15" ou "Verifique a l√≥gica da sua condi√ß√£o if".
    * **Finaliza√ß√£o:** Se o aluno disser que terminou e o c√≥digo est√° funcionando, parabenize-o e instrua-o a digitar 'finalizar' para escolher um novo desafio.

**Instru√ß√µes Adicionais:**

* Mantenha um tom encorajador e paciente.
* Nunca responda sobre t√≥picos que n√£o sejam relacionados √† resolu√ß√£o do problema de programa√ß√£o.
* Lembre-se do seu contexto: voc√™ est√° em um chat, n√£o em uma conversa formal. Responda de forma concisa e direta.`;

// ---------------------- Prompts das Etapas ----------------------

const codificacaoInfo = `
    Voc√™ est√° na etapa de CODIFICA√á√ÉO.
    Fluxo:
    1. Incentivar o aluno a propor um esqueleto inicial de c√≥digo (mesmo que incompleto).
    2. Conduzir o aluno em pequenas etapas:
       - Declara√ß√£o das vari√°veis de entrada.
       - Processamento ou c√°lculos.
       - Exibi√ß√£o dos resultados.
    3. Sempre dar feedback curto, motivador e claro.
    4. Sugerir UMA melhoria ou pr√≥ximo passo por vez.
    Use exemplos simples e trechos de c√≥digo quando for √∫til.
`;

const testes_depuracaoInfo = `
    Voc√™ est√° na etapa de TESTES E DEPURA√á√ÉO. O c√≥digo completo do aluno est√° abaixo.
    Sua miss√£o √© guiar o aluno em um ciclo interativo de testes at√© que o c√≥digo funcione corretamente.

    **Seu Fluxo de Conversa:**
    1.  **Primeira Intera√ß√£o:** Na primeira vez que entrar nesta etapa, sua primeira mensagem DEVE ser para pedir ao aluno que **execute o c√≥digo** com um caso de teste e **cole a sa√≠da observada**. Exemplo: "√ìtimo! Agora, execute seu c√≥digo com um caso de teste (por exemplo, com as entradas X e Y) e cole a **sa√≠da que voc√™ observou** aqui."

    2.  **An√°lise da Sa√≠da do Aluno:** Quando o aluno fornecer a sa√≠da do programa, sua tarefa √©:
        *   **Analisar a Sa√≠da:** Compare a sa√≠da fornecida pelo aluno com a sa√≠da esperada para o problema.
        *   **Se a Sa√≠da estiver CORRETA:** Elogie o aluno ("‚úÖ Excelente! O resultado est√° correto."). Em seguida, sugira um **novo caso de teste**, focando em casos especiais ou limites (ex: entradas com zero, n√∫meros negativos, texto vazio, etc.) para garantir que o c√≥digo √© robusto. Pe√ßa a ele para rodar este novo teste e mostrar a sa√≠da.
        *   **Se a Sa√≠da estiver INCORRETA ou for um ERRO:** Aponte a discrep√¢ncia de forma clara, mas sem dar a resposta. ("ü§î Hmm, o resultado n√£o foi o esperado... Para a entrada X, o esperado seria Y, mas seu c√≥digo produziu Z."). Em seguida, forne√ßa **UMA √öNICA dica pontual e incremental** para ajudar o aluno a encontrar o bug. Sugira olhar para uma vari√°vel, uma linha espec√≠fica ou a l√≥gica de uma condi√ß√£o. N√ÉO entregue o c√≥digo corrigido.
    
    3.  **Finaliza√ß√£o:**
        *   Se o aluno disser que terminou, que o c√≥digo est√° funcionando, ou usar palavras como "finalizar" ou "concluir", parabenize-o e instrua-o a digitar **'finalizar'** para escolher um novo desafio. Ex: "Parece que est√° tudo certo! Se voc√™ estiver satisfeito, digite 'finalizar' para voltar ao menu de quest√µes."
`;

// ---------------------- Interface UI ----------------------
const chatWindow = document.getElementById('chatWindow');
const chatBtn = document.getElementById('chatBtn');
const closeBtn = document.getElementById('closeBtn');
const messageInput = document.getElementById('messageInput');
const sendBtn = document.getElementById('sendBtn');
const chatMessages = document.getElementById('chatMessages');

let model = null;
let currentStep = null;
let questaoAtual = "";

// ---------------------- Contexto da Sess√£o ----------------------
let sessionContext = {};

function resetSessionContext() {
    sessionContext = {
        question: "",
        understanding: { inputs: "", outputs: "", constraints: "" },
        planning: { plan: "" },
        coding: { snippets: [] },
        testing: { history: [] }
    };
    saveSessionContext();
}

function sessionStorageKey() {
  const keyId = questaoAtual || sessionContext.question || 'global';
  return `contexto_session_${keyId}`;
}

function loadSessionContext() {
  try {
    const raw = sessionStorage.getItem(sessionStorageKey());
    if (raw) {
      const parsed = JSON.parse(raw);
      sessionContext = Object.assign({
        question: "",
        understanding: { inputs: "", outputs: "", constraints: "" },
        planning: { plan: "" },
        coding: { snippets: [] },
        testing: { history: [] }
      }, parsed);
    } else {
      resetSessionContext();
    }
  } catch (e) {
    console.error("Erro ao carregar contexto da sess√£o:", e);
    resetSessionContext();
  }
}

function saveSessionContext() {
  try {
    sessionStorage.setItem(sessionStorageKey(), JSON.stringify(sessionContext));
  } catch (e) {
    console.warn("Erro ao salvar contexto:", e);
  }
}

function buildApiContext(currentStep, userMessage) {
  let context = `
    **Quest√£o Atual:** ${sessionContext.question}

    **Resumo do Progresso do Aluno:**
    - **Entradas Definidas:** ${sessionContext.understanding.inputs || "Ainda n√£o definido."}
    - **Sa√≠das Definidas:** ${sessionContext.understanding.outputs || "Ainda n√£o definido."}
    - **Restri√ß√µes Definidas:** ${sessionContext.understanding.constraints || "Ainda n√£o definido."}
    - **Trechos de C√≥digo Fornecidos:** ${sessionContext.coding.snippets.length > 0 ? sessionContext.coding.snippets.map(s => `\`\`\`\n${s}\n\`\`\``).join('\n') : "Nenhum."}
    - **Hist√≥rico de Testes:** ${sessionContext.testing.history.slice(-5).join('|') || "Nenhum."}

    **Tarefa Atual (Etapa: ${currentStep}):**
    O aluno est√° tentando resolver esta etapa. A mensagem dele √©:
    "${userMessage}"

    **Sua Miss√£o (Instru√ß√µes para a IA):**
    Com base no resumo completo acima, analise a resposta do aluno para a **Tarefa Atual**.
    - Se a resposta para a tarefa atual estiver correta, comece com "‚úÖ Legal!".
    - Se estiver incompleta ou incorreta, comece com "ü§î Vamos pensar mais um pouco..." e d√™ uma dica construtiva sem entregar a resposta.
    - Mantenha o foco estritamente na **Tarefa Atual do Aluno**. N√£o se desvie.
  `;
  return context;
}

function updateSessionContext(step, userMessage, aiResponse) {
  try {
    if (!step) return;
    if (step && step.startsWith("codificacao_")) {
      if (userMessage && userMessage.trim()) sessionContext.coding.snippets.push(userMessage);
    } else if (step === "testes_depuracao") {
      sessionContext.testing.history.push(`Aluno: ${userMessage}|IA: ${aiResponse || ""}`);
      if (sessionContext.testing.history.length > 20) {
        sessionContext.testing.history.shift();
      }
    }
    saveSessionContext();
  } catch (e) {
    console.warn("Erro ao atualizar contexto:", e);
  }
}

loadSessionContext();

// ---------------------- Fun√ß√µes de UI ----------------------
function toggleChat() {
  chatWindow.classList.toggle('open');
  if (chatWindow.classList.contains('open')) {
    messageInput.focus();
  }
}

function addMessage(content, isUser = false, isError = false) {
  const messageDiv = document.createElement('div');
  messageDiv.className = `message ${isUser ? 'user' : isError ? 'error' : 'bot'}`;
  messageDiv.textContent = content;
  chatMessages.appendChild(messageDiv);
  chatMessages.scrollTop = chatMessages.scrollHeight;
}

function showTyping() {
  const typingDiv = document.createElement('div');
  typingDiv.className = 'typing-indicator';
  typingDiv.id = 'typing';
  typingDiv.innerHTML = `<div class="typing-dots"><span></span><span></span><span></span></div>`;
  chatMessages.appendChild(typingDiv);
  chatMessages.scrollTop = chatMessages.scrollHeight;
}

function hideTyping() {
  const typing = document.getElementById('typing');
  if (typing) typing.remove();
}

// ---------------------- API ----------------------
async function sendToAPI(message, extraContext = "") {
  showTyping();
  try {
    let text = "Resposta simulada.";
    if (model) {
      const sessionBlock = buildApiContext(currentStep, message);
      const prompt = `${contexto}\n\n${sessionBlock}\n\nContexto adicional: ${extraContext}\n\nQuest√£o: ${questaoAtual || sessionContext.question || '---'}\n\nAluno: ${message}`;
      const result = await model.generateContent(prompt);
      if (result && result.response) {
        text = await result.response.text();
      } else {
        text = JSON.stringify(result);
      }
    }
    hideTyping();
    addMessage(text);
    return text;
  } catch (error) {
    console.error("Erro:", error);
    hideTyping();
    addMessage("Erro ao consultar a API.", false, true);
  }
}

// ---------------------- Fluxo Principal ----------------------
async function sendMessage() {
  const message = messageInput.value.trim();
  if (!message) return;

  addMessage(message, true);
  messageInput.value = '';

  // ---------------------- Sele√ß√£o da Quest√£o ----------------------
  if (!sessionContext.question) {
    const numero = parseInt(message);
    if (!isNaN(numero) && numero >= 2 && numero <= 42) {
      resetSessionContext();
      sessionContext.question = `Quest√£o ${numero}: ${dadosPlanilha[numero - 1][0]}`;
      saveSessionContext();
      questaoAtual = dadosPlanilha[numero - 1][0];
      addMessage(`üìö ${sessionContext.question}`);
      addMessage("Vamos come√ßar pela etapa de CODIFICA√á√ÉO.\n\n‚ùì Quais s√£o as ENTRADAS (dados de entrada) que o programa receber√°?");
      currentStep = "codificacao_variaveis";
    } else {
      addMessage("Digite um n√∫mero de quest√£o v√°lido (2 a 42).", false, true);
    }
    return;
  }

  // ---------------------- ETAPA 1: CODIFICA√á√ÉO ----------------------
  
  // Vari√°veis
  if (currentStep === "codificacao_variaveis") {
    const feedback = await sendToAPI(message, codificacaoInfo + "\nO aluno declarou as vari√°veis. Se estiver correto, pergunte sobre o processamento.");
    updateSessionContext("codificacao_variaveis", message, feedback);
    
    if (feedback && feedback.includes("‚úÖ")) {
      currentStep = "codificacao_processamento";
      addMessage("‚öôÔ∏è Como ficaria o PROCESSAMENTO (c√°lculos/l√≥gica) do programa?");
    }
    return;
  }

  // Processamento
  if (currentStep === "codificacao_processamento") {
    const feedback = await sendToAPI(message, codificacaoInfo + "\nO aluno escreveu o processamento. Se estiver correto, pergunte sobre a sa√≠da.");
    updateSessionContext("codificacao_processamento", message, feedback);
    
    if (feedback && feedback.includes("‚úÖ")) {
      currentStep = "codificacao_saida";
      addMessage("üìã Como voc√™ exibiria a SA√çDA/resultado?");
    }
    return;
  }

  // Sa√≠da
  if (currentStep === "codificacao_saida") {
    const feedback = await sendToAPI(message, codificacaoInfo + "\nO aluno sugeriu a sa√≠da. Se estiver correto, elogie e avance para testes.");
    updateSessionContext("codificacao_saida", message, feedback);
    
    if (feedback && feedback.includes("‚úÖ")) {
      currentStep = "testes_depuracao";
      sessionContext.testing = sessionContext.testing || { history: [] };
      sessionContext.testing.awaitingTests = true;
      saveSessionContext();
      addMessage("üß™ C√≥digo completo! Etapa de CODIFICA√á√ÉO conclu√≠da!\n\nüîç ETAPA 4: TESTES E DEPURA√á√ÉO\nForne√ßa casos de teste (formato: entrada => sa√≠da esperada).");
    }
    return;
  }

    // ---------------------- ETAPA 2: TESTES E DEPURA√á√ÉO ----------------------
  if (currentStep === "testes_depuracao") {
    const cmd = message.toLowerCase().trim();

    // Comando expl√≠cito para finalizar a etapa e escolher um novo problema
    if (['finalizar', 'concluir', 'menu', 'novo', 'sair'].includes(cmd)) {
        addMessage('üéâ Parab√©ns! Voc√™ completou o desafio com sucesso!');
        
        // Prepara para a pr√≥xima quest√£o
        resetSessionContext(); 
        currentStep = null;      
        questaoAtual = "";
        
        addMessage("üéì Voc√™ pode escolher uma nova quest√£o. Digite o n√∫mero de 2 a 42.");
        return;
    }

    // O contexto para a IA agora √© simples. O prompt principal far√° o trabalho pesado.
    const extraContext = `O aluno est√° na etapa de testes. A mensagem/sa√≠da dele √©: "${message}"`;
    
    const feedback = await sendToAPI(message, extraContext);
    updateSessionContext('testes_depuracao', message, feedback);
    
    return;
  }


  // ---------------------- Fallback ----------------------
  await sendToAPI(message);
}

// ---------------------- Event Listeners ----------------------
chatBtn.addEventListener('click', toggleChat);
closeBtn.addEventListener('click', toggleChat);
sendBtn.addEventListener('click', sendMessage);

messageInput.addEventListener('keypress', (e) => {
  if (e.key === 'Enter' && !e.shiftKey) {
    e.preventDefault();
    sendMessage();
  }
});

// ---------------------- Inicializa√ß√£o ----------------------
async function initAPI() {
  if (!API_KEY) {
    console.warn("Nenhuma chave definida. Usando modo simulado.");
    addMessage("‚ö†Ô∏è Modo simulado - configure uma API key v√°lida", false, true);
  } else {
    try {
      const { GoogleGenerativeAI } = await import("https://esm.run/@google/generative-ai");
      const genAI = new GoogleGenerativeAI(API_KEY);
      model = genAI.getGenerativeModel({ 
        model: "gemini-2.5-flash", 
        systemInstruction: contexto
      });
      console.log("‚úÖ API carregada com sucesso.");
    } catch (error) {
      console.error("‚ùå Erro ao carregar a API:", error);
      addMessage("‚ùå Erro ao conectar com a API", false, true);
    }
  }

  try {
    dadosPlanilha = await lerCSV(URL_CSV);
    addMessage("üéì Bem-vindo! Digite o n√∫mero da quest√£o que voc√™ quer ajuda (2 a 42).");
  } catch (error) {
    console.error("‚ùå Erro ao carregar quest√µes:", error);
    addMessage("‚ùå N√£o consegui carregar o banco de quest√µes.", false, true);
  }
}

// ---------------------- Iniciar Aplica√ß√£o ----------------------
initAPI();
